{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","index","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,kDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,WAAuCG,IAAI,WACnD,gCACE,6BAAKL,IACL,4BAAIC,WCaGK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OAAQ,cAAC,EAAD,CAENR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,OAHhBM,EAAOG,GAAOR,UCKhBS,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,qBAAKT,UAAU,MAAf,SACE,uBAAOA,UAAU,mCACfU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEHI,EARA,SAACC,GACd,OACE,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,YCkBEC,E,kDApBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,qDAQnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAA2B,IAAxBG,KAAKJ,MAAMC,SACL,yDAEFG,KAAKX,MAAMK,a,GAjBKQ,aCoDZC,G,wDA9Cb,aAAe,IAAD,8BACZ,gBAOFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SARzC,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJH,E,qDAed,WAAqB,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAK,EAAKZ,SAAS,CAACtB,OAAQkC,S,oBAGzC,WAAS,MAEuBb,KAAKJ,MAA5BjB,EAFA,EAEAA,OAAQ2B,EAFR,EAEQA,YAETQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACnC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAItD,OAAQtC,EAAOwC,OAGZ,sBAAK5C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACG,cAAC,EAAD,CAAUzB,OAAQmC,WAP5B,oBAAIvC,UAAU,KAAd,yB,GAhCa2B,cCKHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.49b7a65b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}200x200` }alt=\"Robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => { \n  return (\n    <div>\n     {\n        robots.map((user, index) => {\n          return (<Card\n            key={robots[index].id}\n            id={robots[index].id}\n            name={robots[index].name}\n            email={robots[index].email}\n          />)\n\n        })\n     }\n    </div>\n  );\n};  \n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  // check for error upon lifecycle rendering child prop\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if(this.state.hasError === true) {\n      return <h1>Ooops. That is not good</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  onSearchChange = (event) =>  {\n    // setting the state of searchfield to the event value.\n    this.setState({searchfield: event.target.value})\n    \n  }\n\n  // Triggers when component mounts, so the user can be fetched from the api using promises mocked by json placeholder\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users =>  this.setState({robots: users}))\n  }\n\n  render() {\n    // Destructuring to get robots and searchfield from state\n    const {robots, searchfield} = this.state;\n    // Filtering the robots based on the search input\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    \n    // Check to see if robots have been returned from the fetch and handle it\n     return !robots.length  ?\n     <h1 className='tc'>Loading</h1> :\n       (\n        <div className='tc'>\n          <h1 className='f1'>Robot Friends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n               <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}